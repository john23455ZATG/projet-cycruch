#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <math.h>

// John
// pM est le nombre de colone , pN est le nombre de ligne ,pSym le nombre de
// symbole diferent la procedure demande utilisateur demande le nombre de colone
// et de ligne que le plateau de jeu aura ainsi que le nombre de symbole compris
// entre 4 et 6
////////////////////////////////////////////////////////////////
int logo(){
    FILE *f=fopen("logo.txt","r");
}
int ecrire_score(int* po,int* pscore){
	FILE *f = fopen("score.txt","a");
	if (f==NULL){
    		printf("impossible d'ouvrir le fichier");
    		return 1;
	}
	else{
		fprintf(f,"%d%d",*po,*pscore);
	}
	fclose(f);
	return 0;
}


    

int sauvegarde(int N,int M,int sym, int pscore,int pla[][N]){
	FILE * f = fopen("s.txt","w+");	
	if (f==NULL){
    		printf("impossible d'ouvrir le fichier");
   	 	return 1;
  	}
	else{
		fprintf(f,"%d\n%d\n%d\n%d\n",pscore,M,N,sym);
		for (int i =0;i<M;i++){
		   	for (int j =0;j<N;j++){
				fprintf(f,"%d ",pla[i][j]);
		}
	  	}
	fclose(f);
	}
	return 0;

}
int recup_score(int *po ){
  char c[30];
  int temp;
  int temp2;
  int max = 0;
  int len;
  FILE *f =fopen("score.txt","r");
  if (f==NULL){
    printf("impossible d'ouvrir le fichier");
    return 1;
  }
  else {
    while(fgets(c,sizeof c,f)!=NULL){
      temp = c[0] -'0';
      printf("%s",c);
      temp2 =0;
      len =strlen(c);
      if ((*po)==temp){
        for (int i=1; i<len-1;i++){
          temp = c[i]-'0';
          temp2 = temp2 + temp*pow(10,len-2-i) ;
        } 

        }
      if (temp2>max){
          max = temp2;
      }
    }
    printf("\033[H\033[J");
    printf("le meilleur score dans ce mode de jeu est de : %d points \n",max);
    fclose(f);
  }
  return 0;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////::
void vide_buffer(){
while(getchar()!='\n'){}
}

void demande_utilisateur(int *pM, int *pN, int *pSym) {
  int verif;
 do{ printf(" rentrer le nombre de ligne :\n ");
  verif=scanf("%d",&*pM);
  vide_buffer();
  }while(verif!=1);
  do{ printf("rentrer le nombre de colonne :\n ");
  verif=scanf("%d", &*pN);
  vide_buffer();
  }while(verif!=1);
  do{while (*pSym >= 7 || *pSym <= 3) {
    printf(" rentrer le nombre de symbole :\n");
    scanf("%d", *&pSym);
    vide_buffer();
  }
  }while(verif!=1);
}

// crer le plateau de jeu de colone M et de ligne N avec nbr_Sym le nombre de
// symbolle different
void crer_plat(int M, int N, int nbr_Sym, int pla[][N]) {
  for (int i = 0; i < M; i++) {
    for (int j = 0; j < N; j++) {
      pla[i][j] = rand() % nbr_Sym + 1;
    }
  }
}

// complexitÃ© ?
// revoir les espace
// fonction qui permet d'afficher les colonnes et les lignes du tableau
void afiche(int M, int N, int pla[][N]) {
 printf("\033[H\033[J"); // PERMET DE FAIRE UN SEUL TABLEAU 

  printf("  ");
  for (int i = 1; i <= N; i++) {
    if(i<10){
    printf(" %d ", i);
    }
    else{
    printf(" %d", i);
    }
  }
  printf(" ");
 
  printf("\n   ");
  for (int i = 1; i <= N; i++) {
    printf("-- ");
  }
  printf("\n");
  for (int i = 0; i < M; i++) {
    printf("%c |", 65 + i);
    for (int j = 0; j < N; j++) {
      switch(pla[i][j]){
       
        case 6:
          printf("\U0001F36D ");
          break;
        case 1:
          printf("\U0001F36B ");
          break;
        case 2:
          printf("\U0001F36C ");
          break;
        case 3:
          printf("\U0001F36E ");
          break;
        case 4:
          printf("\U0001F36F ");
          break;
        case 5:
          printf("\U0001F9C1 ");
          break;
        default:
          printf("  ");
        }
    }
    printf("\n");
  }
}
// verifier que qd y'a trois symboles ou plus a cote on les supprimes
void Vertical(int M, int N, int pla[][N], int Vertical[][N]) {
  for (int i = 0; i < M; i++) {
    for (int j = 0; j < N; j++) {
      if (pla[i][j] != 0) {
        if (i < M - 1) {
          int y = i + 1;
          int compte = 0;
          while (y != M && (pla[i][j] == pla[y][j])) {
            compte++;
            y++;
          }
          if (compte >= 2) {
            for (int k = i; k < y; k++) {
              Vertical[k][j] = 0;
            }
          }
        }
      }
    }
  }
}
// verifier que qd y'a trois symboles ou plus a cote on les supprimes
void Horizontal(int M, int N, int pla[][N], int Horizontal[][N]) {
  for (int i = 0; i < M; i++) {
    for (int j = 0; j < N; j++) {
      if (pla[i][j] != 0) {
        if (j < N - 1) {
          int y = j + 1;
          int compte = 0;
          while (y != N && (pla[i][j] == pla[i][y])) {
            compte++;
            y++;
          }
          if (compte >= 2) {
            for (int k = j; k < y; k++) {
              Horizontal[i][k] = 0;
            }
          }    
        }
      }
    }
  }
}
void Circulaire_G(int M, int N, int pla[][N], int C[][N]) {
  for (int i = 0; i < M; i++) {
    for (int j = 0; j < N; j++) {
       int compte = 0 ;
if (pla[i][0] == pla[i][1]) {
             compte++;
            }
     if (j==0 && compte >=1 && pla[i][N-1]==pla[i][0]){
      C[i][0]= 0;
      C[i][1] = 0;
      C[i][N-1]= 0;
     }
   
    }
  }
 }
 
 void Circulaire_D(int M, int N, int pla[][N], int C[][N]) {
  for (int i = 0; i < M; i++) {
    for (int j = 0; j < N; j++) {
      int compte = 0 ;
      if (pla[i][N-2] == pla[i][N-1]) {
        compte++;
            }
     if (j==M-2 && compte >=1 && pla[i][N-1]==pla[i][0]){
      C[i][0]= 0;
      C[i][N-2] = 0;
      C[i][N-1]= 0;
     }
    }
  }
 }
// permet de regrouper les deux tableau horizantal et vertical a voir probleme
void simplification(int M, int N, int Horizontale[][N], int Vertical[][N],int C_G[][N],int C_D[][N],int pla[][N]) {
  for (int i = 0; i < M; i++) {
    for (int j = 0; j < N; j++) {
      if (Horizontale[i][j] == 0 || Vertical[i][j] == 0 || C_G[i][j] == 0 || C_D[i][j] == 0) {
        pla[i][j] = 0;
      }
    }
  }
}
void initialisation(int N,int M, int pla[][N],int horizontale[][N]){
 
  for (int i = 0; i < M; i++) {
    for (int j = 0; j < N; j++) {
      horizontale[i][j] = pla[i][j];
    }
  }
}
void gravite(int M, int N, int pla[][N]){
  for (int i = M-1;i>=0;i--){
      for (int j = N-1; j >= 0; j--) {
       if (pla[i][j]==0){
        int k = j;
        while (k>=0 && pla[i][k]==0){
          k--;
        }
         if(k>=0){
           pla[i][j]= pla[i][k];
           pla[i][k]=0;
         }
       }
      }
    }
}

void ajout(int M, int N, int nbr_Sym, int pla[][N]){
  for (int i = 0; i < M; i++) {
    for (int j = 0; j < N; j++) {
      if (pla[i][j]==0){
        pla[i][j] = rand() % nbr_Sym + 1;
      }
    }
  }
}

 int compte_zero(int M, int N, int pla[][N]){
   int zero = 0;
   for (int i = 0; i < M; i++) {
    for (int j = 0; j < N; j++) {
      if (pla[i][j]==0){
        zero++;
      }
      else{
        break;
      }
    }
   }
   return zero;  
 }

void verification(int M, int N,int nbr_Sym, int pla[][N]){
    int horizontal[M][N];
    int vertical[M][N];
    int C_G[M][N];
    int C_D[M][N];
    ajout(M, N, nbr_Sym,pla );
    initialisation(N,M, pla, horizontal);
  initialisation(N,M, pla, vertical);
  initialisation(N,M, pla, C_G);
  initialisation(N,M, pla, C_D);
    Horizontal(M, N, pla, horizontal);
    Vertical(M, N, pla, vertical);
    Circulaire_G(M,N,pla,C_G);
    Circulaire_D(M,N,pla,C_D);
    simplification(M, N, horizontal, vertical,C_G,C_D ,pla);
    gravite(M,N,pla);

}

void reaction_en_chaine(int M, int N,int nbr_Sym, int pla[][N],int * pscore){
  int zero1;
  *pscore +=compte_zero(M, N, pla);
  do {
    verification(M, N, nbr_Sym , pla);
    printf("\n");
    afiche( M, N, pla);
    zero1 = compte_zero(M, N, pla);
    *pscore +=compte_zero(M, N, pla);
    }while (zero1 !=0);
   printf("\nvotre score est de : %d",*pscore);
}

int echange(int N,int M,int nbr_sym,int colone1, int colone2,int ligne1,int ligne2,int verif, int pla[][N],int * pscore){
  int pla_temp[M][N];
  initialisation(N,M, pla, pla_temp);
  int temp = pla_temp[ligne2][colone2-1];
  pla_temp[ligne2][colone2-1] = pla_temp[ligne1][colone1-1];
  pla_temp[ligne1][colone1-1] = temp;
  verification(M, N, nbr_sym, pla_temp);
  if(compte_zero(M,N, pla_temp)!=0){
      if(verif == 0){
        return 1;
      }
    else{
      initialisation(N,M, pla_temp, pla);
      reaction_en_chaine(M, N,nbr_sym, pla,pscore);
    }
  }
  else{
    return 0;
  }
}

int victoire(int N,int M,int nbr_sym, int pla[][N]){
  for (int i =0;i<M;i++){
   for (int j =0;j<N;j++){
     int k = 0;
     while(k<M){
       for (int l =0;l<N;l++){
         if(echange(N,M,nbr_sym,j+1,l+1,i,k,0,pla,0)==1){
           return  1;
         }
       }
      k++;
     }
    }
  }
  return 0;
}

void demande_case (int N,int M,int nbr_sym, int pla[][N],int * pscore){
  char lettre1;
  int colone1;    
  int ligne1;
  char lettre2;
  int colone2;
  int ligne2;
  int verif;
  do {
  printf("rentrer une lettre  : \n");
  verif=scanf("%c",&lettre1);
  vide_buffer();
  if (lettre1>=97){
    lettre1 = lettre1 - 32;
  }
  }while(lettre1<65 || lettre1>65+M );
    
  do{
  printf("rentrer un chiffre   : ");
  verif = scanf("%d",&colone1);
  vide_buffer();
  }while(verif !=1 || colone1<=0 || colone1>N);
  ligne1 = lettre1-65;
  do{
  printf("rentrer une deuxieme lettre  : ");
  scanf("%c",&lettre2);
   if (lettre2>=97){
    lettre2 = lettre2 - 32;
  }
  vide_buffer();
   }while(lettre2<65 || lettre2>65+M );
  do {
  printf("colone un deuxime chiffre: ");
  scanf("%d",&colone2);
  vide_buffer();
  }while(verif !=1 || colone2<=0 || colone2>N);
  ligne2 = lettre2-65;  
  echange(N,M,nbr_sym, colone1, colone2,ligne1,ligne2,1,pla,pscore);
}


int jouer( int *po){
int score = 0;
int * pscore= &score;
int temp=0;
int M = 0;
  int N = 0;
  int nbr_sym = 0;
  int *pM = &M;
  int *pN = &N;
  int *pSym = &nbr_sym;
  time_t deb;
  time_t fin;
  int min;
  if(*po==1){
      min=2;
  }
  else if(*po==2){
      min=5;
  }
  else {
    min =10;
  }
  demande_utilisateur(pM, pN, pSym);
  srand(time(NULL));
  int pla[M][N];
  int horizontal[M][N];
  int vertical[M][N];
  char c ='a';
  crer_plat(M, N, nbr_sym, pla);
  reaction_en_chaine(M, N, nbr_sym, pla,pscore);
  afiche(M, N, pla);
  deb = time(NULL);
  fin =time(NULL);
  temp = fin-deb;
  *pscore = 0;
  while(victoire(N,M,nbr_sym,pla)==1  &&  temp<10){
    
      demande_case(N,M,nbr_sym,pla,pscore);
      afiche(M, N, pla);
      fin = time(NULL);
    if(*po!=4){
      temp = fin-deb;
    }
    else{
      printf("\n votre score est de : %d \n",*pscore);
      printf("souhaitez vous sauvgarder la partie ? O/N\n");
      scanf("%c",&c);
      if(c=='O'|| c=='o'){
          sauvegarde(N,  M,nbr_sym, *pscore, pla);
          printf("votre partie a Ã©tÃ© sauvegarder");
          return 1;
      }
      
    }
    
    }
  printf("\nvous avez perdu ");
  printf("\nvotre score est de : %d",*pscore);
	ecrire_score(po,pscore);
  
  
  return 0;
}
////////////////////////////////////////////////////////
int lire_sauvegarde(){
int score;
  int *pscore;
int N;
  int M;
  int sym;
  char c;
  int temp;
  	FILE * f = fopen("s.txt","r");	
	if (f==NULL){
    		printf("impossible d'ouvrir le fichier");
   	 	return 1;
  	}
	else{
    fscanf(f, "%d", &score);
    fscanf(f, "%c", &c);
    fscanf(f, "%d", &M);
    fscanf(f, "%c", &c);
    fscanf(f, "%d", &N);
    fscanf(f, "%c", &c);
    fscanf(f, "%d", &sym);
    int pla[M][N];
    for(int i =0 ; i<M;i++){
      for (int j =0;j<N;j++){
      fscanf(f,"%d",&pla[i][j]);
        fscanf(f, "%c", &c);
      } 
    }
     fclose(f);
    afiche(M, N, pla);
    //reaction_en_chaine(M,N,sym,pla,pscore);
    }
	return 0;
}
////////////////////////////

int menu(int *po ){
    int choix; 
    int ple[3][3];
	for (int i =0;i<3;i++){
	   for (int j =0;j<3;j++){
	ple[i][j]=i;
	}
		}
	
    FILE * fic;
    int verif;
     
   printf("Bienvenue dans le jeu \nselectionner votre choix \n");
    do {printf("1 : Jouer\n2 : OPTION\n3: score\n4: sauvegarde\n5: sortie\n");
    
  verif=scanf("%d",&choix);
  vide_buffer();
  }while(verif!=1);
    
  switch( choix) {
    case 1: printf(" A vous de jouer \n");
    jouer(po);
    break;
  
   //case 2 : printf("fichier" );
 // fic= fopen( "placement du fichier");
 // fclose(fic);
  // break;
  
  case 2 : 
	printf("votre objectif est d'avor leplus de point possible.\n'");
	printf("option : choisir le temps \n 1 : 2 min \n 2 : 5 min \n 3: 10 min \n 4 : temps illimitÃ© ");
        scanf("%d", &*po);
          switch(*po){
            case 1 : printf(" vous avez 2 min \n");
            break;
            case 2 : printf("vous avez 5 min \n");
            break;
            case 3 : printf(" vous avez 10 min\n");
            break;
		        case 4 : printf(" vous avez le temps illimitÃ© \n");
            break;
            
          }
          menu(po);
          return 0;
      
    case 3 : recup_score(po);
          menu(po);
          break;
    case 4:lire_sauvegarde();
    break;
    case 5 : printf("Quitter le jeu \n");    
    return 1;
  }
   
    
  return 0;
}



int main(void) {
  int option=1;
  int *po=&option;
  menu(po );
  return 0;
}
